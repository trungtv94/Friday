
Friday.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800350c  0800350c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800350c  0800350c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800350c  0800350c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  08003520  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003520  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000877c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000188b  00000000  00000000  000287b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  0002a040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000840  00000000  00000000  0002a938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000132b4  00000000  00000000  0002b178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007bd6  00000000  00000000  0003e42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068c2b  00000000  00000000  00046002  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aec2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000239c  00000000  00000000  000aeca8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080034b4 	.word	0x080034b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080034b4 	.word	0x080034b4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa8e 	bl	8000670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f809 	bl	800016a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8e0 	bl	800031c <MX_GPIO_Init>
  MX_RTC_Init();
 800015c:	f000 f8c2 	bl	80002e4 <MX_RTC_Init>
  MX_I2C1_Init();
 8000160:	f000 f860 	bl	8000224 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000164:	f000 f88e 	bl	8000284 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000168:	e7fe      	b.n	8000168 <main+0x1c>

0800016a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016a:	b580      	push	{r7, lr}
 800016c:	b094      	sub	sp, #80	; 0x50
 800016e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000174:	2228      	movs	r2, #40	; 0x28
 8000176:	2100      	movs	r1, #0
 8000178:	4618      	mov	r0, r3
 800017a:	f003 f993 	bl	80034a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017e:	f107 0314 	add.w	r3, r7, #20
 8000182:	2200      	movs	r2, #0
 8000184:	601a      	str	r2, [r3, #0]
 8000186:	605a      	str	r2, [r3, #4]
 8000188:	609a      	str	r2, [r3, #8]
 800018a:	60da      	str	r2, [r3, #12]
 800018c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800019a:	2305      	movs	r3, #5
 800019c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a4:	2300      	movs	r3, #0
 80001a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80001a8:	2301      	movs	r3, #1
 80001aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b0:	2302      	movs	r3, #2
 80001b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c4:	4618      	mov	r0, r3
 80001c6:	f002 faa7 	bl	8002718 <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80001d0:	f000 f8de 	bl	8000390 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d8:	2302      	movs	r3, #2
 80001da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ea:	f107 0314 	add.w	r3, r7, #20
 80001ee:	2102      	movs	r1, #2
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 fd11 	bl	8002c18 <HAL_RCC_ClockConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80001fc:	f000 f8c8 	bl	8000390 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000200:	2301      	movs	r3, #1
 8000202:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000208:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f002 fe9f 	bl	8002f50 <HAL_RCCEx_PeriphCLKConfig>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000218:	f000 f8ba 	bl	8000390 <Error_Handler>
  }
}
 800021c:	bf00      	nop
 800021e:	3750      	adds	r7, #80	; 0x50
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}

08000224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000228:	4b13      	ldr	r3, [pc, #76]	; (8000278 <MX_I2C1_Init+0x54>)
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <MX_I2C1_Init+0x58>)
 800022c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800022e:	4b12      	ldr	r3, [pc, #72]	; (8000278 <MX_I2C1_Init+0x54>)
 8000230:	4a13      	ldr	r2, [pc, #76]	; (8000280 <MX_I2C1_Init+0x5c>)
 8000232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000234:	4b10      	ldr	r3, [pc, #64]	; (8000278 <MX_I2C1_Init+0x54>)
 8000236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800023a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 22;
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <MX_I2C1_Init+0x54>)
 800023e:	2216      	movs	r2, #22
 8000240:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000242:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <MX_I2C1_Init+0x54>)
 8000244:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000248:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <MX_I2C1_Init+0x54>)
 800024c:	2200      	movs	r2, #0
 800024e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <MX_I2C1_Init+0x54>)
 8000252:	2200      	movs	r2, #0
 8000254:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <MX_I2C1_Init+0x54>)
 8000258:	2200      	movs	r2, #0
 800025a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <MX_I2C1_Init+0x54>)
 800025e:	2200      	movs	r2, #0
 8000260:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <MX_I2C1_Init+0x54>)
 8000264:	f000 fd50 	bl	8000d08 <HAL_I2C_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800026e:	f000 f88f 	bl	8000390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000028 	.word	0x20000028
 800027c:	40005400 	.word	0x40005400
 8000280:	00061a80 	.word	0x00061a80

08000284 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000288:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <MX_I2C2_Init+0x54>)
 800028a:	4a14      	ldr	r2, [pc, #80]	; (80002dc <MX_I2C2_Init+0x58>)
 800028c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800028e:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <MX_I2C2_Init+0x54>)
 8000290:	4a13      	ldr	r2, [pc, #76]	; (80002e0 <MX_I2C2_Init+0x5c>)
 8000292:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <MX_I2C2_Init+0x54>)
 8000296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800029a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 22;
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <MX_I2C2_Init+0x54>)
 800029e:	2216      	movs	r2, #22
 80002a0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <MX_I2C2_Init+0x54>)
 80002a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <MX_I2C2_Init+0x54>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <MX_I2C2_Init+0x54>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <MX_I2C2_Init+0x54>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <MX_I2C2_Init+0x54>)
 80002be:	2200      	movs	r2, #0
 80002c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002c2:	4805      	ldr	r0, [pc, #20]	; (80002d8 <MX_I2C2_Init+0x54>)
 80002c4:	f000 fd20 	bl	8000d08 <HAL_I2C_Init>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 80002ce:	f000 f85f 	bl	8000390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	2000007c 	.word	0x2000007c
 80002dc:	40005800 	.word	0x40005800
 80002e0:	00061a80 	.word	0x00061a80

080002e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <MX_RTC_Init+0x30>)
 80002ea:	4a0b      	ldr	r2, [pc, #44]	; (8000318 <MX_RTC_Init+0x34>)
 80002ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_RTC_Init+0x30>)
 80002f0:	f04f 32ff 	mov.w	r2, #4294967295
 80002f4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <MX_RTC_Init+0x30>)
 80002f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002fc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <MX_RTC_Init+0x30>)
 8000300:	f002 ff98 	bl	8003234 <HAL_RTC_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800030a:	f000 f841 	bl	8000390 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	200000d0 	.word	0x200000d0
 8000318:	40002800 	.word	0x40002800

0800031c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000322:	4b1a      	ldr	r3, [pc, #104]	; (800038c <MX_GPIO_Init+0x70>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	4a19      	ldr	r2, [pc, #100]	; (800038c <MX_GPIO_Init+0x70>)
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	6193      	str	r3, [r2, #24]
 800032e:	4b17      	ldr	r3, [pc, #92]	; (800038c <MX_GPIO_Init+0x70>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	f003 0310 	and.w	r3, r3, #16
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033a:	4b14      	ldr	r3, [pc, #80]	; (800038c <MX_GPIO_Init+0x70>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4a13      	ldr	r2, [pc, #76]	; (800038c <MX_GPIO_Init+0x70>)
 8000340:	f043 0320 	orr.w	r3, r3, #32
 8000344:	6193      	str	r3, [r2, #24]
 8000346:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_GPIO_Init+0x70>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	f003 0320 	and.w	r3, r3, #32
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_GPIO_Init+0x70>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4a0d      	ldr	r2, [pc, #52]	; (800038c <MX_GPIO_Init+0x70>)
 8000358:	f043 0308 	orr.w	r3, r3, #8
 800035c:	6193      	str	r3, [r2, #24]
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_GPIO_Init+0x70>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	f003 0308 	and.w	r3, r3, #8
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_GPIO_Init+0x70>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a07      	ldr	r2, [pc, #28]	; (800038c <MX_GPIO_Init+0x70>)
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	6193      	str	r3, [r2, #24]
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <MX_GPIO_Init+0x70>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f003 0304 	and.w	r3, r3, #4
 800037e:	603b      	str	r3, [r7, #0]
 8000380:	683b      	ldr	r3, [r7, #0]

}
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	40021000 	.word	0x40021000

08000390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <HAL_MspInit+0x5c>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <HAL_MspInit+0x5c>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <HAL_MspInit+0x60>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <HAL_MspInit+0x60>)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010000 	.word	0x40010000

08000400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000408:	f107 0318 	add.w	r3, r7, #24
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a33      	ldr	r2, [pc, #204]	; (80004e8 <HAL_I2C_MspInit+0xe8>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d134      	bne.n	800048a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b32      	ldr	r3, [pc, #200]	; (80004ec <HAL_I2C_MspInit+0xec>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a31      	ldr	r2, [pc, #196]	; (80004ec <HAL_I2C_MspInit+0xec>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b2f      	ldr	r3, [pc, #188]	; (80004ec <HAL_I2C_MspInit+0xec>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0308 	and.w	r3, r3, #8
 8000434:	617b      	str	r3, [r7, #20]
 8000436:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000438:	23c0      	movs	r3, #192	; 0xc0
 800043a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800043c:	2312      	movs	r3, #18
 800043e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	2303      	movs	r3, #3
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000444:	f107 0318 	add.w	r3, r7, #24
 8000448:	4619      	mov	r1, r3
 800044a:	4829      	ldr	r0, [pc, #164]	; (80004f0 <HAL_I2C_MspInit+0xf0>)
 800044c:	f000 fb02 	bl	8000a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000450:	4b26      	ldr	r3, [pc, #152]	; (80004ec <HAL_I2C_MspInit+0xec>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	4a25      	ldr	r2, [pc, #148]	; (80004ec <HAL_I2C_MspInit+0xec>)
 8000456:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800045a:	61d3      	str	r3, [r2, #28]
 800045c:	4b23      	ldr	r3, [pc, #140]	; (80004ec <HAL_I2C_MspInit+0xec>)
 800045e:	69db      	ldr	r3, [r3, #28]
 8000460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000464:	613b      	str	r3, [r7, #16]
 8000466:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	2100      	movs	r1, #0
 800046c:	201f      	movs	r0, #31
 800046e:	f000 fa38 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000472:	201f      	movs	r0, #31
 8000474:	f000 fa51 	bl	800091a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2100      	movs	r1, #0
 800047c:	2020      	movs	r0, #32
 800047e:	f000 fa30 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000482:	2020      	movs	r0, #32
 8000484:	f000 fa49 	bl	800091a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000488:	e029      	b.n	80004de <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a19      	ldr	r2, [pc, #100]	; (80004f4 <HAL_I2C_MspInit+0xf4>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d124      	bne.n	80004de <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <HAL_I2C_MspInit+0xec>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <HAL_I2C_MspInit+0xec>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <HAL_I2C_MspInit+0xec>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0308 	and.w	r3, r3, #8
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004b2:	2312      	movs	r3, #18
 80004b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b6:	2303      	movs	r3, #3
 80004b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ba:	f107 0318 	add.w	r3, r7, #24
 80004be:	4619      	mov	r1, r3
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <HAL_I2C_MspInit+0xf0>)
 80004c2:	f000 fac7 	bl	8000a54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_I2C_MspInit+0xec>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_I2C_MspInit+0xec>)
 80004cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_I2C_MspInit+0xec>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
}
 80004de:	bf00      	nop
 80004e0:	3728      	adds	r7, #40	; 0x28
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40005400 	.word	0x40005400
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010c00 	.word	0x40010c00
 80004f4:	40005800 	.word	0x40005800

080004f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <HAL_RTC_MspInit+0x3c>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d110      	bne.n	800052c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800050a:	f002 f8f9 	bl	8002700 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <HAL_RTC_MspInit+0x40>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a09      	ldr	r2, [pc, #36]	; (8000538 <HAL_RTC_MspInit+0x40>)
 8000514:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <HAL_RTC_MspInit+0x40>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <HAL_RTC_MspInit+0x44>)
 8000528:	2201      	movs	r2, #1
 800052a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40002800 	.word	0x40002800
 8000538:	40021000 	.word	0x40021000
 800053c:	4242043c 	.word	0x4242043c

08000540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <HardFault_Handler+0x4>

08000552 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <MemManage_Handler+0x4>

08000558 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <BusFault_Handler+0x4>

0800055e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <UsageFault_Handler+0x4>

08000564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058c:	f000 f8b6 	bl	80006fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <I2C1_EV_IRQHandler+0x10>)
 800059a:	f000 fcdd 	bl	8000f58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000028 	.word	0x20000028

080005a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <I2C1_ER_IRQHandler+0x10>)
 80005ae:	f000 fe39 	bl	8001224 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <SystemInit+0x5c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <SystemInit+0x5c>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <SystemInit+0x5c>)
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	4911      	ldr	r1, [pc, #68]	; (8000618 <SystemInit+0x5c>)
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <SystemInit+0x60>)
 80005d4:	4013      	ands	r3, r2
 80005d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <SystemInit+0x5c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <SystemInit+0x5c>)
 80005de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <SystemInit+0x5c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <SystemInit+0x5c>)
 80005ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <SystemInit+0x5c>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <SystemInit+0x5c>)
 80005fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <SystemInit+0x5c>)
 8000602:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000606:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <SystemInit+0x64>)
 800060a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	40021000 	.word	0x40021000
 800061c:	f8ff0000 	.word	0xf8ff0000
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000624:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000626:	e003      	b.n	8000630 <LoopCopyDataInit>

08000628 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800062a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800062c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800062e:	3104      	adds	r1, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000630:	480a      	ldr	r0, [pc, #40]	; (800065c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000634:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000636:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000638:	d3f6      	bcc.n	8000628 <CopyDataInit>
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800063c:	e002      	b.n	8000644 <LoopFillZerobss>

0800063e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000640:	f842 3b04 	str.w	r3, [r2], #4

08000644 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000646:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000648:	d3f9      	bcc.n	800063e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800064a:	f7ff ffb7 	bl	80005bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800064e:	f002 ff05 	bl	800345c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000652:	f7ff fd7b 	bl	800014c <main>
  bx lr
 8000656:	4770      	bx	lr
  ldr r3, =_sidata
 8000658:	08003514 	.word	0x08003514
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000660:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000664:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000668:	200000e8 	.word	0x200000e8

0800066c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC1_2_IRQHandler>
	...

08000670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <HAL_Init+0x28>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_Init+0x28>)
 800067a:	f043 0310 	orr.w	r3, r3, #16
 800067e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000680:	2003      	movs	r0, #3
 8000682:	f000 f923 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f808 	bl	800069c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800068c:	f7ff fe86 	bl	800039c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40022000 	.word	0x40022000

0800069c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_InitTick+0x54>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_InitTick+0x58>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f93b 	bl	8000936 <HAL_SYSTICK_Config>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e00e      	b.n	80006e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d80a      	bhi.n	80006e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d0:	2200      	movs	r2, #0
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	f04f 30ff 	mov.w	r0, #4294967295
 80006d8:	f000 f903 	bl	80008e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <HAL_InitTick+0x5c>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006e2:	2300      	movs	r3, #0
 80006e4:	e000      	b.n	80006e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000008 	.word	0x20000008
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_IncTick+0x1c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <HAL_IncTick+0x20>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4413      	add	r3, r2
 800070c:	4a03      	ldr	r2, [pc, #12]	; (800071c <HAL_IncTick+0x20>)
 800070e:	6013      	str	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	20000008 	.word	0x20000008
 800071c:	200000e4 	.word	0x200000e4

08000720 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;
 8000724:	4b02      	ldr	r3, [pc, #8]	; (8000730 <HAL_GetTick+0x10>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	200000e4 	.word	0x200000e4

08000734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800075c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000766:	4a04      	ldr	r2, [pc, #16]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	60d3      	str	r3, [r2, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__NVIC_GetPriorityGrouping+0x18>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	f003 0307 	and.w	r3, r3, #7
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db0b      	blt.n	80007c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f003 021f 	and.w	r2, r3, #31
 80007b0:	4906      	ldr	r1, [pc, #24]	; (80007cc <__NVIC_EnableIRQ+0x34>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	095b      	lsrs	r3, r3, #5
 80007b8:	2001      	movs	r0, #1
 80007ba:	fa00 f202 	lsl.w	r2, r0, r2
 80007be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	; (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	; 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f7ff ff90 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff2d 	bl	8000734 <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f4:	f7ff ff42 	bl	800077c <__NVIC_GetPriorityGrouping>
 80008f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff ff90 	bl	8000824 <NVIC_EncodePriority>
 8000904:	4602      	mov	r2, r0
 8000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff5f 	bl	80007d0 <__NVIC_SetPriority>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff35 	bl	8000798 <__NVIC_EnableIRQ>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffa2 	bl	8000888 <SysTick_Config>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000962:	2b02      	cmp	r3, #2
 8000964:	d005      	beq.n	8000972 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2204      	movs	r2, #4
 800096a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e051      	b.n	8000a16 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 020e 	bic.w	r2, r2, #14
 8000980:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f022 0201 	bic.w	r2, r2, #1
 8000990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <HAL_DMA_Abort_IT+0xd0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d029      	beq.n	80009f0 <HAL_DMA_Abort_IT+0xa0>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <HAL_DMA_Abort_IT+0xd4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d022      	beq.n	80009ec <HAL_DMA_Abort_IT+0x9c>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <HAL_DMA_Abort_IT+0xd8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d01a      	beq.n	80009e6 <HAL_DMA_Abort_IT+0x96>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a1d      	ldr	r2, [pc, #116]	; (8000a2c <HAL_DMA_Abort_IT+0xdc>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d012      	beq.n	80009e0 <HAL_DMA_Abort_IT+0x90>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <HAL_DMA_Abort_IT+0xe0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d00a      	beq.n	80009da <HAL_DMA_Abort_IT+0x8a>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1a      	ldr	r2, [pc, #104]	; (8000a34 <HAL_DMA_Abort_IT+0xe4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d102      	bne.n	80009d4 <HAL_DMA_Abort_IT+0x84>
 80009ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009d2:	e00e      	b.n	80009f2 <HAL_DMA_Abort_IT+0xa2>
 80009d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009d8:	e00b      	b.n	80009f2 <HAL_DMA_Abort_IT+0xa2>
 80009da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009de:	e008      	b.n	80009f2 <HAL_DMA_Abort_IT+0xa2>
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	e005      	b.n	80009f2 <HAL_DMA_Abort_IT+0xa2>
 80009e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ea:	e002      	b.n	80009f2 <HAL_DMA_Abort_IT+0xa2>
 80009ec:	2310      	movs	r3, #16
 80009ee:	e000      	b.n	80009f2 <HAL_DMA_Abort_IT+0xa2>
 80009f0:	2301      	movs	r3, #1
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <HAL_DMA_Abort_IT+0xe8>)
 80009f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2201      	movs	r2, #1
 80009fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	4798      	blx	r3
    } 
  }
  return status;
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40020008 	.word	0x40020008
 8000a24:	4002001c 	.word	0x4002001c
 8000a28:	40020030 	.word	0x40020030
 8000a2c:	40020044 	.word	0x40020044
 8000a30:	40020058 	.word	0x40020058
 8000a34:	4002006c 	.word	0x4002006c
 8000a38:	40020000 	.word	0x40020000

08000a3c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b08b      	sub	sp, #44	; 0x2c
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a66:	e127      	b.n	8000cb8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	f040 8116 	bne.w	8000cb2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d034      	beq.n	8000af8 <HAL_GPIO_Init+0xa4>
 8000a8e:	2b12      	cmp	r3, #18
 8000a90:	d80d      	bhi.n	8000aae <HAL_GPIO_Init+0x5a>
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d02b      	beq.n	8000aee <HAL_GPIO_Init+0x9a>
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d804      	bhi.n	8000aa4 <HAL_GPIO_Init+0x50>
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d031      	beq.n	8000b02 <HAL_GPIO_Init+0xae>
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d01c      	beq.n	8000adc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aa2:	e048      	b.n	8000b36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	d043      	beq.n	8000b30 <HAL_GPIO_Init+0xdc>
 8000aa8:	2b11      	cmp	r3, #17
 8000aaa:	d01b      	beq.n	8000ae4 <HAL_GPIO_Init+0x90>
          break;
 8000aac:	e043      	b.n	8000b36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aae:	4a89      	ldr	r2, [pc, #548]	; (8000cd4 <HAL_GPIO_Init+0x280>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d026      	beq.n	8000b02 <HAL_GPIO_Init+0xae>
 8000ab4:	4a87      	ldr	r2, [pc, #540]	; (8000cd4 <HAL_GPIO_Init+0x280>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d806      	bhi.n	8000ac8 <HAL_GPIO_Init+0x74>
 8000aba:	4a87      	ldr	r2, [pc, #540]	; (8000cd8 <HAL_GPIO_Init+0x284>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d020      	beq.n	8000b02 <HAL_GPIO_Init+0xae>
 8000ac0:	4a86      	ldr	r2, [pc, #536]	; (8000cdc <HAL_GPIO_Init+0x288>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d01d      	beq.n	8000b02 <HAL_GPIO_Init+0xae>
          break;
 8000ac6:	e036      	b.n	8000b36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ac8:	4a85      	ldr	r2, [pc, #532]	; (8000ce0 <HAL_GPIO_Init+0x28c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d019      	beq.n	8000b02 <HAL_GPIO_Init+0xae>
 8000ace:	4a85      	ldr	r2, [pc, #532]	; (8000ce4 <HAL_GPIO_Init+0x290>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d016      	beq.n	8000b02 <HAL_GPIO_Init+0xae>
 8000ad4:	4a84      	ldr	r2, [pc, #528]	; (8000ce8 <HAL_GPIO_Init+0x294>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d013      	beq.n	8000b02 <HAL_GPIO_Init+0xae>
          break;
 8000ada:	e02c      	b.n	8000b36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e028      	b.n	8000b36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e023      	b.n	8000b36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	3308      	adds	r3, #8
 8000af4:	623b      	str	r3, [r7, #32]
          break;
 8000af6:	e01e      	b.n	8000b36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	330c      	adds	r3, #12
 8000afe:	623b      	str	r3, [r7, #32]
          break;
 8000b00:	e019      	b.n	8000b36 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d102      	bne.n	8000b10 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e012      	b.n	8000b36 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d105      	bne.n	8000b24 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	611a      	str	r2, [r3, #16]
          break;
 8000b22:	e008      	b.n	8000b36 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b24:	2308      	movs	r3, #8
 8000b26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	615a      	str	r2, [r3, #20]
          break;
 8000b2e:	e002      	b.n	8000b36 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	2bff      	cmp	r3, #255	; 0xff
 8000b3a:	d801      	bhi.n	8000b40 <HAL_GPIO_Init+0xec>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	e001      	b.n	8000b44 <HAL_GPIO_Init+0xf0>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3304      	adds	r3, #4
 8000b44:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	2bff      	cmp	r3, #255	; 0xff
 8000b4a:	d802      	bhi.n	8000b52 <HAL_GPIO_Init+0xfe>
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_Init+0x104>
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	3b08      	subs	r3, #8
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	210f      	movs	r1, #15
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	401a      	ands	r2, r3
 8000b6a:	6a39      	ldr	r1, [r7, #32]
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	431a      	orrs	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 8096 	beq.w	8000cb2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b86:	4b59      	ldr	r3, [pc, #356]	; (8000cec <HAL_GPIO_Init+0x298>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	4a58      	ldr	r2, [pc, #352]	; (8000cec <HAL_GPIO_Init+0x298>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6193      	str	r3, [r2, #24]
 8000b92:	4b56      	ldr	r3, [pc, #344]	; (8000cec <HAL_GPIO_Init+0x298>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b9e:	4a54      	ldr	r2, [pc, #336]	; (8000cf0 <HAL_GPIO_Init+0x29c>)
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	3302      	adds	r3, #2
 8000ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000baa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	f003 0303 	and.w	r3, r3, #3
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	220f      	movs	r2, #15
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a4b      	ldr	r2, [pc, #300]	; (8000cf4 <HAL_GPIO_Init+0x2a0>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d013      	beq.n	8000bf2 <HAL_GPIO_Init+0x19e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a4a      	ldr	r2, [pc, #296]	; (8000cf8 <HAL_GPIO_Init+0x2a4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d00d      	beq.n	8000bee <HAL_GPIO_Init+0x19a>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a49      	ldr	r2, [pc, #292]	; (8000cfc <HAL_GPIO_Init+0x2a8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d007      	beq.n	8000bea <HAL_GPIO_Init+0x196>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a48      	ldr	r2, [pc, #288]	; (8000d00 <HAL_GPIO_Init+0x2ac>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_GPIO_Init+0x192>
 8000be2:	2303      	movs	r3, #3
 8000be4:	e006      	b.n	8000bf4 <HAL_GPIO_Init+0x1a0>
 8000be6:	2304      	movs	r3, #4
 8000be8:	e004      	b.n	8000bf4 <HAL_GPIO_Init+0x1a0>
 8000bea:	2302      	movs	r3, #2
 8000bec:	e002      	b.n	8000bf4 <HAL_GPIO_Init+0x1a0>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e000      	b.n	8000bf4 <HAL_GPIO_Init+0x1a0>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf6:	f002 0203 	and.w	r2, r2, #3
 8000bfa:	0092      	lsls	r2, r2, #2
 8000bfc:	4093      	lsls	r3, r2
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c04:	493a      	ldr	r1, [pc, #232]	; (8000cf0 <HAL_GPIO_Init+0x29c>)
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	089b      	lsrs	r3, r3, #2
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c1e:	4b39      	ldr	r3, [pc, #228]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4938      	ldr	r1, [pc, #224]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	600b      	str	r3, [r1, #0]
 8000c2a:	e006      	b.n	8000c3a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c2c:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	4933      	ldr	r1, [pc, #204]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d006      	beq.n	8000c54 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c46:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	492e      	ldr	r1, [pc, #184]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	604b      	str	r3, [r1, #4]
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	4929      	ldr	r1, [pc, #164]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d006      	beq.n	8000c7c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	4924      	ldr	r1, [pc, #144]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	608b      	str	r3, [r1, #8]
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	491f      	ldr	r1, [pc, #124]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d006      	beq.n	8000ca4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	491a      	ldr	r1, [pc, #104]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	60cb      	str	r3, [r1, #12]
 8000ca2:	e006      	b.n	8000cb2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	4915      	ldr	r1, [pc, #84]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f47f aed0 	bne.w	8000a68 <HAL_GPIO_Init+0x14>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	372c      	adds	r7, #44	; 0x2c
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	10210000 	.word	0x10210000
 8000cd8:	10110000 	.word	0x10110000
 8000cdc:	10120000 	.word	0x10120000
 8000ce0:	10310000 	.word	0x10310000
 8000ce4:	10320000 	.word	0x10320000
 8000ce8:	10220000 	.word	0x10220000
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	40010c00 	.word	0x40010c00
 8000cfc:	40011000 	.word	0x40011000
 8000d00:	40011400 	.word	0x40011400
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e10f      	b.n	8000f3a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d106      	bne.n	8000d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fb66 	bl	8000400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2224      	movs	r2, #36	; 0x24
 8000d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0201 	bic.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d4c:	f002 f8ba 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8000d50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4a7b      	ldr	r2, [pc, #492]	; (8000f44 <HAL_I2C_Init+0x23c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d807      	bhi.n	8000d6c <HAL_I2C_Init+0x64>
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4a7a      	ldr	r2, [pc, #488]	; (8000f48 <HAL_I2C_Init+0x240>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	bf94      	ite	ls
 8000d64:	2301      	movls	r3, #1
 8000d66:	2300      	movhi	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	e006      	b.n	8000d7a <HAL_I2C_Init+0x72>
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4a77      	ldr	r2, [pc, #476]	; (8000f4c <HAL_I2C_Init+0x244>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	bf94      	ite	ls
 8000d74:	2301      	movls	r3, #1
 8000d76:	2300      	movhi	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e0db      	b.n	8000f3a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4a72      	ldr	r2, [pc, #456]	; (8000f50 <HAL_I2C_Init+0x248>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	0c9b      	lsrs	r3, r3, #18
 8000d8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	4a64      	ldr	r2, [pc, #400]	; (8000f44 <HAL_I2C_Init+0x23c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d802      	bhi.n	8000dbc <HAL_I2C_Init+0xb4>
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	3301      	adds	r3, #1
 8000dba:	e009      	b.n	8000dd0 <HAL_I2C_Init+0xc8>
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dc2:	fb02 f303 	mul.w	r3, r2, r3
 8000dc6:	4a63      	ldr	r2, [pc, #396]	; (8000f54 <HAL_I2C_Init+0x24c>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	099b      	lsrs	r3, r3, #6
 8000dce:	3301      	adds	r3, #1
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6812      	ldr	r2, [r2, #0]
 8000dd4:	430b      	orrs	r3, r1
 8000dd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000de2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	4956      	ldr	r1, [pc, #344]	; (8000f44 <HAL_I2C_Init+0x23c>)
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d80d      	bhi.n	8000e0c <HAL_I2C_Init+0x104>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	1e59      	subs	r1, r3, #1
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	bf38      	it	cc
 8000e08:	2304      	movcc	r3, #4
 8000e0a:	e04f      	b.n	8000eac <HAL_I2C_Init+0x1a4>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d111      	bne.n	8000e38 <HAL_I2C_Init+0x130>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	1e58      	subs	r0, r3, #1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6859      	ldr	r1, [r3, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	440b      	add	r3, r1
 8000e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e26:	3301      	adds	r3, #1
 8000e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	e012      	b.n	8000e5e <HAL_I2C_Init+0x156>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	1e58      	subs	r0, r3, #1
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6859      	ldr	r1, [r3, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	0099      	lsls	r1, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bf0c      	ite	eq
 8000e58:	2301      	moveq	r3, #1
 8000e5a:	2300      	movne	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_I2C_Init+0x15e>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e022      	b.n	8000eac <HAL_I2C_Init+0x1a4>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10e      	bne.n	8000e8c <HAL_I2C_Init+0x184>
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	1e58      	subs	r0, r3, #1
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6859      	ldr	r1, [r3, #4]
 8000e76:	460b      	mov	r3, r1
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	440b      	add	r3, r1
 8000e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e80:	3301      	adds	r3, #1
 8000e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e8a:	e00f      	b.n	8000eac <HAL_I2C_Init+0x1a4>
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	1e58      	subs	r0, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6859      	ldr	r1, [r3, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	0099      	lsls	r1, r3, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	6809      	ldr	r1, [r1, #0]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69da      	ldr	r2, [r3, #28]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000eda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	6911      	ldr	r1, [r2, #16]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68d2      	ldr	r2, [r2, #12]
 8000ee6:	4311      	orrs	r1, r2
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	430b      	orrs	r3, r1
 8000eee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0201 	orr.w	r2, r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2220      	movs	r2, #32
 8000f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	000186a0 	.word	0x000186a0
 8000f48:	001e847f 	.word	0x001e847f
 8000f4c:	003d08ff 	.word	0x003d08ff
 8000f50:	431bde83 	.word	0x431bde83
 8000f54:	10624dd3 	.word	0x10624dd3

08000f58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000f78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b10      	cmp	r3, #16
 8000f86:	d003      	beq.n	8000f90 <HAL_I2C_EV_IRQHandler+0x38>
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b40      	cmp	r3, #64	; 0x40
 8000f8c:	f040 80b6 	bne.w	80010fc <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10d      	bne.n	8000fc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8000fb0:	d003      	beq.n	8000fba <HAL_I2C_EV_IRQHandler+0x62>
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8000fb8:	d101      	bne.n	8000fbe <HAL_I2C_EV_IRQHandler+0x66>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_I2C_EV_IRQHandler+0x68>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	f000 8127 	beq.w	8001214 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00c      	beq.n	8000fea <HAL_I2C_EV_IRQHandler+0x92>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	0a5b      	lsrs	r3, r3, #9
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d006      	beq.n	8000fea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f001 fb74 	bl	80026ca <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fd03 	bl	80019ee <I2C_Master_SB>
 8000fe8:	e087      	b.n	80010fa <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08db      	lsrs	r3, r3, #3
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <HAL_I2C_EV_IRQHandler+0xb2>
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	0a5b      	lsrs	r3, r3, #9
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fd78 	bl	8001af8 <I2C_Master_ADD10>
 8001008:	e077      	b.n	80010fa <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	085b      	lsrs	r3, r3, #1
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d009      	beq.n	800102a <HAL_I2C_EV_IRQHandler+0xd2>
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	0a5b      	lsrs	r3, r3, #9
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fd91 	bl	8001b4a <I2C_Master_ADDR>
 8001028:	e067      	b.n	80010fa <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d030      	beq.n	8001098 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001044:	f000 80e8 	beq.w	8001218 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	09db      	lsrs	r3, r3, #7
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00f      	beq.n	8001074 <HAL_I2C_EV_IRQHandler+0x11c>
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	0a9b      	lsrs	r3, r3, #10
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d009      	beq.n	8001074 <HAL_I2C_EV_IRQHandler+0x11c>
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f9e4 	bl	800143a <I2C_MasterTransmit_TXE>
 8001072:	e042      	b.n	80010fa <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80cb 	beq.w	8001218 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	0a5b      	lsrs	r3, r3, #9
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80c4 	beq.w	8001218 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 faca 	bl	800162a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001096:	e0bf      	b.n	8001218 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a6:	f000 80b7 	beq.w	8001218 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	099b      	lsrs	r3, r3, #6
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00f      	beq.n	80010d6 <HAL_I2C_EV_IRQHandler+0x17e>
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	0a9b      	lsrs	r3, r3, #10
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d009      	beq.n	80010d6 <HAL_I2C_EV_IRQHandler+0x17e>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d103      	bne.n	80010d6 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 fb21 	bl	8001716 <I2C_MasterReceive_RXNE>
 80010d4:	e011      	b.n	80010fa <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 809a 	beq.w	8001218 <HAL_I2C_EV_IRQHandler+0x2c0>
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	0a5b      	lsrs	r3, r3, #9
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8093 	beq.w	8001218 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 fb91 	bl	800181a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80010f8:	e08e      	b.n	8001218 <HAL_I2C_EV_IRQHandler+0x2c0>
 80010fa:	e08d      	b.n	8001218 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	e007      	b.n	800111e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	085b      	lsrs	r3, r3, #1
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d012      	beq.n	8001150 <HAL_I2C_EV_IRQHandler+0x1f8>
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	0a5b      	lsrs	r3, r3, #9
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00c      	beq.n	8001150 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 ff55 	bl	8001ff8 <I2C_Slave_ADDR>
 800114e:	e066      	b.n	800121e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d009      	beq.n	8001170 <HAL_I2C_EV_IRQHandler+0x218>
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	0a5b      	lsrs	r3, r3, #9
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 ff89 	bl	8002080 <I2C_Slave_STOPF>
 800116e:	e056      	b.n	800121e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	2b21      	cmp	r3, #33	; 0x21
 8001174:	d002      	beq.n	800117c <HAL_I2C_EV_IRQHandler+0x224>
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	2b29      	cmp	r3, #41	; 0x29
 800117a:	d125      	bne.n	80011c8 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	09db      	lsrs	r3, r3, #7
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00f      	beq.n	80011a8 <HAL_I2C_EV_IRQHandler+0x250>
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	0a9b      	lsrs	r3, r3, #10
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d009      	beq.n	80011a8 <HAL_I2C_EV_IRQHandler+0x250>
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d103      	bne.n	80011a8 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 fe6d 	bl	8001e80 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80011a6:	e039      	b.n	800121c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d033      	beq.n	800121c <HAL_I2C_EV_IRQHandler+0x2c4>
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	0a5b      	lsrs	r3, r3, #9
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d02d      	beq.n	800121c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fe9a 	bl	8001efa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80011c6:	e029      	b.n	800121c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	099b      	lsrs	r3, r3, #6
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00f      	beq.n	80011f4 <HAL_I2C_EV_IRQHandler+0x29c>
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	0a9b      	lsrs	r3, r3, #10
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d009      	beq.n	80011f4 <HAL_I2C_EV_IRQHandler+0x29c>
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d103      	bne.n	80011f4 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fea4 	bl	8001f3a <I2C_SlaveReceive_RXNE>
 80011f2:	e014      	b.n	800121e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00e      	beq.n	800121e <HAL_I2C_EV_IRQHandler+0x2c6>
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	0a5b      	lsrs	r3, r3, #9
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d008      	beq.n	800121e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 fed2 	bl	8001fb6 <I2C_SlaveReceive_BTF>
 8001212:	e004      	b.n	800121e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8001214:	bf00      	nop
 8001216:	e002      	b.n	800121e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800121c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d016      	beq.n	800127a <HAL_I2C_ER_IRQHandler+0x56>
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d010      	beq.n	800127a <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001268:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	0a5b      	lsrs	r3, r3, #9
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00e      	beq.n	80012a4 <HAL_I2C_ER_IRQHandler+0x80>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d008      	beq.n	80012a4 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80012a2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	0a9b      	lsrs	r3, r3, #10
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d041      	beq.n	8001334 <HAL_I2C_ER_IRQHandler+0x110>
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d03b      	beq.n	8001334 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80012c2:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012d2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80012da:	7efb      	ldrb	r3, [r7, #27]
 80012dc:	2b20      	cmp	r3, #32
 80012de:	d112      	bne.n	8001306 <HAL_I2C_ER_IRQHandler+0xe2>
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10f      	bne.n	8001306 <HAL_I2C_ER_IRQHandler+0xe2>
 80012e6:	7cfb      	ldrb	r3, [r7, #19]
 80012e8:	2b21      	cmp	r3, #33	; 0x21
 80012ea:	d008      	beq.n	80012fe <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80012ec:	7cfb      	ldrb	r3, [r7, #19]
 80012ee:	2b29      	cmp	r3, #41	; 0x29
 80012f0:	d005      	beq.n	80012fe <HAL_I2C_ER_IRQHandler+0xda>
 80012f2:	7cfb      	ldrb	r3, [r7, #19]
 80012f4:	2b28      	cmp	r3, #40	; 0x28
 80012f6:	d106      	bne.n	8001306 <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b21      	cmp	r3, #33	; 0x21
 80012fc:	d103      	bne.n	8001306 <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 ffee 	bl	80022e0 <I2C_Slave_AF>
 8001304:	e016      	b.n	8001334 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800130e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b10      	cmp	r3, #16
 8001322:	d107      	bne.n	8001334 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001332:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	0adb      	lsrs	r3, r3, #11
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00e      	beq.n	800135e <HAL_I2C_ER_IRQHandler+0x13a>
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	0a1b      	lsrs	r3, r3, #8
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d008      	beq.n	800135e <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800135c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f001 f825 	bl	80023c0 <I2C_ITError>
  }
}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	70fb      	strb	r3, [r7, #3]
 80013d2:	4613      	mov	r3, r2
 80013d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001448:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001450:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145c:	2b00      	cmp	r3, #0
 800145e:	d150      	bne.n	8001502 <I2C_MasterTransmit_TXE+0xc8>
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b21      	cmp	r3, #33	; 0x21
 8001464:	d14d      	bne.n	8001502 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2b08      	cmp	r3, #8
 800146a:	d01d      	beq.n	80014a8 <I2C_MasterTransmit_TXE+0x6e>
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b20      	cmp	r3, #32
 8001470:	d01a      	beq.n	80014a8 <I2C_MasterTransmit_TXE+0x6e>
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001478:	d016      	beq.n	80014a8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001488:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2211      	movs	r2, #17
 800148e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2220      	movs	r2, #32
 800149c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff6c 	bl	800137e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80014a6:	e0bc      	b.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80014b6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2220      	movs	r2, #32
 80014d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b40      	cmp	r3, #64	; 0x40
 80014e0:	d107      	bne.n	80014f2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff81 	bl	80013f2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80014f0:	e097      	b.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ff3f 	bl	800137e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001500:	e08f      	b.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b21      	cmp	r3, #33	; 0x21
 8001506:	d007      	beq.n	8001518 <I2C_MasterTransmit_TXE+0xde>
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	2b40      	cmp	r3, #64	; 0x40
 800150c:	f040 8089 	bne.w	8001622 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b22      	cmp	r3, #34	; 0x22
 8001514:	f040 8085 	bne.w	8001622 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151c:	b29b      	uxth	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d108      	bne.n	8001534 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001530:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001532:	e076      	b.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b40      	cmp	r3, #64	; 0x40
 800153e:	d15d      	bne.n	80015fc <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11d      	bne.n	8001584 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	2b01      	cmp	r3, #1
 800154e:	d10b      	bne.n	8001568 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001554:	b2da      	uxtb	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001560:	1c9a      	adds	r2, r3, #2
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001566:	e05c      	b.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156c:	b29b      	uxth	r3, r3
 800156e:	121b      	asrs	r3, r3, #8
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001582:	e04e      	b.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001588:	2b01      	cmp	r3, #1
 800158a:	d10b      	bne.n	80015a4 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001590:	b2da      	uxtb	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80015a2:	e03e      	b.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d13a      	bne.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b22      	cmp	r3, #34	; 0x22
 80015b6:	d108      	bne.n	80015ca <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015c6:	601a      	str	r2, [r3, #0]
}
 80015c8:	e02b      	b.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b21      	cmp	r3, #33	; 0x21
 80015d4:	d125      	bne.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80015fa:	e012      	b.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001620:	e7ff      	b.n	8001622 <I2C_MasterTransmit_TXE+0x1e8>
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b21      	cmp	r3, #33	; 0x21
 8001642:	d164      	bne.n	800170e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001648:	b29b      	uxth	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d012      	beq.n	8001674 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001668:	b29b      	uxth	r3, r3
 800166a:	3b01      	subs	r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8001672:	e04c      	b.n	800170e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b08      	cmp	r3, #8
 8001678:	d01d      	beq.n	80016b6 <I2C_MasterTransmit_BTF+0x8c>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b20      	cmp	r3, #32
 800167e:	d01a      	beq.n	80016b6 <I2C_MasterTransmit_BTF+0x8c>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001686:	d016      	beq.n	80016b6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001696:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2211      	movs	r2, #17
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fe65 	bl	800137e <HAL_I2C_MasterTxCpltCallback>
}
 80016b4:	e02b      	b.n	800170e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80016c4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2220      	movs	r2, #32
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b40      	cmp	r3, #64	; 0x40
 80016ee:	d107      	bne.n	8001700 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fe7a 	bl	80013f2 <HAL_I2C_MemTxCpltCallback>
}
 80016fe:	e006      	b.n	800170e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fe38 	bl	800137e <HAL_I2C_MasterTxCpltCallback>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b22      	cmp	r3, #34	; 0x22
 8001728:	d173      	bne.n	8001812 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d920      	bls.n	800177a <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691a      	ldr	r2, [r3, #16]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001754:	b29b      	uxth	r3, r3
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	2b03      	cmp	r3, #3
 8001766:	d154      	bne.n	8001812 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001776:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001778:	e04b      	b.n	8001812 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	2b02      	cmp	r3, #2
 8001780:	d047      	beq.n	8001812 <I2C_MasterReceive_RXNE+0xfc>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d002      	beq.n	800178e <I2C_MasterReceive_RXNE+0x78>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d141      	bne.n	8001812 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017ac:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b40      	cmp	r3, #64	; 0x40
 80017e6:	d10a      	bne.n	80017fe <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fe04 	bl	8001404 <HAL_I2C_MemRxCpltCallback>
}
 80017fc:	e009      	b.n	8001812 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2212      	movs	r2, #18
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fdbf 	bl	8001390 <HAL_I2C_MasterRxCpltCallback>
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182c:	b29b      	uxth	r3, r3
 800182e:	2b04      	cmp	r3, #4
 8001830:	d11b      	bne.n	800186a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001840:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001868:	e0bd      	b.n	80019e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	2b03      	cmp	r3, #3
 8001872:	d129      	bne.n	80018c8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001882:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b04      	cmp	r3, #4
 8001888:	d00a      	beq.n	80018a0 <I2C_MasterReceive_BTF+0x86>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d007      	beq.n	80018a0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800189e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	691a      	ldr	r2, [r3, #16]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80018c6:	e08e      	b.n	80019e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d176      	bne.n	80019c0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d002      	beq.n	80018de <I2C_MasterReceive_BTF+0xc4>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b10      	cmp	r3, #16
 80018dc:	d108      	bne.n	80018f0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e019      	b.n	8001924 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d002      	beq.n	80018fc <I2C_MasterReceive_BTF+0xe2>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d108      	bne.n	800190e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e00a      	b.n	8001924 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b10      	cmp	r3, #16
 8001912:	d007      	beq.n	8001924 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001922:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001940:	b29b      	uxth	r3, r3
 8001942:	3b01      	subs	r3, #1
 8001944:	b29a      	uxth	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800197e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2220      	movs	r2, #32
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b40      	cmp	r3, #64	; 0x40
 8001992:	d10a      	bne.n	80019aa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fd2e 	bl	8001404 <HAL_I2C_MemRxCpltCallback>
}
 80019a8:	e01d      	b.n	80019e6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2212      	movs	r2, #18
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fce9 	bl	8001390 <HAL_I2C_MasterRxCpltCallback>
}
 80019be:	e012      	b.n	80019e6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b40      	cmp	r3, #64	; 0x40
 8001a00:	d117      	bne.n	8001a32 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a1a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001a1c:	e067      	b.n	8001aee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	611a      	str	r2, [r3, #16]
}
 8001a30:	e05d      	b.n	8001aee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a3a:	d133      	bne.n	8001aa4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b21      	cmp	r3, #33	; 0x21
 8001a46:	d109      	bne.n	8001a5c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a58:	611a      	str	r2, [r3, #16]
 8001a5a:	e008      	b.n	8001a6e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d103      	bne.n	8001a7e <I2C_Master_SB+0x90>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d037      	beq.n	8001aee <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d104      	bne.n	8001a92 <I2C_Master_SB+0xa4>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d02d      	beq.n	8001aee <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aa0:	605a      	str	r2, [r3, #4]
}
 8001aa2:	e024      	b.n	8001aee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10e      	bne.n	8001aca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	11db      	asrs	r3, r3, #7
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f003 0306 	and.w	r3, r3, #6
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f063 030f 	orn	r3, r3, #15
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	611a      	str	r2, [r3, #16]
}
 8001ac8:	e011      	b.n	8001aee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d10d      	bne.n	8001aee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	11db      	asrs	r3, r3, #7
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f003 0306 	and.w	r3, r3, #6
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f063 030e 	orn	r3, r3, #14
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	611a      	str	r2, [r3, #16]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d103      	bne.n	8001b1c <I2C_Master_ADD10+0x24>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d011      	beq.n	8001b40 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <I2C_Master_ADD10+0x38>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b3e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b091      	sub	sp, #68	; 0x44
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b22      	cmp	r3, #34	; 0x22
 8001b72:	f040 8174 	bne.w	8001e5e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <I2C_Master_ADDR+0x54>
 8001b7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b82:	2b40      	cmp	r3, #64	; 0x40
 8001b84:	d10b      	bne.n	8001b9e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b86:	2300      	movs	r3, #0
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
 8001b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9c:	e16b      	b.n	8001e76 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d11d      	bne.n	8001be2 <I2C_Master_ADDR+0x98>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001bae:	d118      	bne.n	8001be2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	651a      	str	r2, [r3, #80]	; 0x50
 8001be0:	e149      	b.n	8001e76 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d113      	bne.n	8001c14 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bec:	2300      	movs	r3, #0
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e120      	b.n	8001e56 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	f040 808a 	bne.w	8001d34 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c26:	d137      	bne.n	8001c98 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c36:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c46:	d113      	bne.n	8001c70 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c56:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	e0f2      	b.n	8001e56 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	623b      	str	r3, [r7, #32]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	623b      	str	r3, [r7, #32]
 8001c84:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e0de      	b.n	8001e56 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d02e      	beq.n	8001cfc <I2C_Master_ADDR+0x1b2>
 8001c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d02b      	beq.n	8001cfc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca6:	2b12      	cmp	r3, #18
 8001ca8:	d102      	bne.n	8001cb0 <I2C_Master_ADDR+0x166>
 8001caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d125      	bne.n	8001cfc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d00e      	beq.n	8001cd4 <I2C_Master_ADDR+0x18a>
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d00b      	beq.n	8001cd4 <I2C_Master_ADDR+0x18a>
 8001cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbe:	2b10      	cmp	r3, #16
 8001cc0:	d008      	beq.n	8001cd4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	e007      	b.n	8001ce4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ce2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	e0ac      	b.n	8001e56 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d0a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e090      	b.n	8001e56 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d158      	bne.n	8001df0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d021      	beq.n	8001d88 <I2C_Master_ADDR+0x23e>
 8001d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d01e      	beq.n	8001d88 <I2C_Master_ADDR+0x23e>
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	d01b      	beq.n	8001d88 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d5e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e012      	b.n	8001dae <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d96:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dbc:	d14b      	bne.n	8001e56 <I2C_Master_ADDR+0x30c>
 8001dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dc4:	d00b      	beq.n	8001dde <I2C_Master_ADDR+0x294>
 8001dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d008      	beq.n	8001dde <I2C_Master_ADDR+0x294>
 8001dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d005      	beq.n	8001dde <I2C_Master_ADDR+0x294>
 8001dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d002      	beq.n	8001dde <I2C_Master_ADDR+0x294>
 8001dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d13b      	bne.n	8001e56 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	e032      	b.n	8001e56 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dfe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e0e:	d117      	bne.n	8001e40 <I2C_Master_ADDR+0x2f6>
 8001e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e16:	d00b      	beq.n	8001e30 <I2C_Master_ADDR+0x2e6>
 8001e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d008      	beq.n	8001e30 <I2C_Master_ADDR+0x2e6>
 8001e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d005      	beq.n	8001e30 <I2C_Master_ADDR+0x2e6>
 8001e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d002      	beq.n	8001e30 <I2C_Master_ADDR+0x2e6>
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d107      	bne.n	8001e40 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8001e5c:	e00b      	b.n	8001e76 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
}
 8001e74:	e7ff      	b.n	8001e76 <I2C_Master_ADDR+0x32c>
 8001e76:	bf00      	nop
 8001e78:	3744      	adds	r7, #68	; 0x44
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d02b      	beq.n	8001ef2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d114      	bne.n	8001ef2 <I2C_SlaveTransmit_TXE+0x72>
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b29      	cmp	r3, #41	; 0x29
 8001ecc:	d111      	bne.n	8001ef2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001edc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2221      	movs	r2, #33	; 0x21
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2228      	movs	r2, #40	; 0x28
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff fa58 	bl	80013a2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d011      	beq.n	8001f30 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d02c      	beq.n	8001fae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d114      	bne.n	8001fae <I2C_SlaveReceive_RXNE+0x74>
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	2b2a      	cmp	r3, #42	; 0x2a
 8001f88:	d111      	bne.n	8001fae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f98:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2222      	movs	r2, #34	; 0x22
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2228      	movs	r2, #40	; 0x28
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fa03 	bl	80013b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d012      	beq.n	8001fee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002012:	2b28      	cmp	r3, #40	; 0x28
 8002014:	d127      	bne.n	8002066 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002024:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	09db      	lsrs	r3, r3, #7
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	81bb      	strh	r3, [r7, #12]
 8002048:	e002      	b.n	8002050 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002058:	89ba      	ldrh	r2, [r7, #12]
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	4619      	mov	r1, r3
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff f9b1 	bl	80013c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002064:	e008      	b.n	8002078 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f06f 0202 	mvn.w	r2, #2
 800206e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800209e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020dc:	d172      	bne.n	80021c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	2b22      	cmp	r3, #34	; 0x22
 80020e2:	d002      	beq.n	80020ea <I2C_Slave_STOPF+0x6a>
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b2a      	cmp	r3, #42	; 0x2a
 80020e8:	d135      	bne.n	8002156 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f043 0204 	orr.w	r2, r3, #4
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800211c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fc8a 	bl	8000a3c <HAL_DMA_GetState>
 8002128:	4603      	mov	r3, r0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d049      	beq.n	80021c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	4a69      	ldr	r2, [pc, #420]	; (80022d8 <I2C_Slave_STOPF+0x258>)
 8002134:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fc08 	bl	8000950 <HAL_DMA_Abort_IT>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d03d      	beq.n	80021c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002150:	4610      	mov	r0, r2
 8002152:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002154:	e035      	b.n	80021c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	b29a      	uxth	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f043 0204 	orr.w	r2, r3, #4
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002188:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fc54 	bl	8000a3c <HAL_DMA_GetState>
 8002194:	4603      	mov	r3, r0
 8002196:	2b01      	cmp	r3, #1
 8002198:	d014      	beq.n	80021c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219e:	4a4e      	ldr	r2, [pc, #312]	; (80022d8 <I2C_Slave_STOPF+0x258>)
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fbd2 	bl	8000950 <HAL_DMA_Abort_IT>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021bc:	4610      	mov	r0, r2
 80021be:	4798      	blx	r3
 80021c0:	e000      	b.n	80021c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d03e      	beq.n	800224c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d112      	bne.n	8002202 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d112      	bne.n	8002236 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f043 0204 	orr.w	r2, r3, #4
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f8b3 	bl	80023c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800225a:	e039      	b.n	80022d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	2b2a      	cmp	r3, #42	; 0x2a
 8002260:	d109      	bne.n	8002276 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2228      	movs	r2, #40	; 0x28
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff f89f 	bl	80013b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b28      	cmp	r3, #40	; 0x28
 8002280:	d111      	bne.n	80022a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a15      	ldr	r2, [pc, #84]	; (80022dc <I2C_Slave_STOPF+0x25c>)
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff f89e 	bl	80013e0 <HAL_I2C_ListenCpltCallback>
}
 80022a4:	e014      	b.n	80022d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	2b22      	cmp	r3, #34	; 0x22
 80022ac:	d002      	beq.n	80022b4 <I2C_Slave_STOPF+0x234>
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b22      	cmp	r3, #34	; 0x22
 80022b2:	d10d      	bne.n	80022d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff f872 	bl	80013b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	080025ed 	.word	0x080025ed
 80022dc:	ffff0000 	.word	0xffff0000

080022e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d002      	beq.n	8002302 <I2C_Slave_AF+0x22>
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d129      	bne.n	8002356 <I2C_Slave_AF+0x76>
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	2b28      	cmp	r3, #40	; 0x28
 8002306:	d126      	bne.n	8002356 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a2c      	ldr	r2, [pc, #176]	; (80023bc <I2C_Slave_AF+0xdc>)
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800231c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002326:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002336:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff f846 	bl	80013e0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002354:	e02e      	b.n	80023b4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b21      	cmp	r3, #33	; 0x21
 800235a:	d126      	bne.n	80023aa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <I2C_Slave_AF+0xdc>)
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2221      	movs	r2, #33	; 0x21
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002386:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002390:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fffd 	bl	80013a2 <HAL_I2C_SlaveTxCpltCallback>
}
 80023a8:	e004      	b.n	80023b4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023b2:	615a      	str	r2, [r3, #20]
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	ffff0000 	.word	0xffff0000

080023c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ce:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b10      	cmp	r3, #16
 80023da:	d10a      	bne.n	80023f2 <I2C_ITError+0x32>
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b22      	cmp	r3, #34	; 0x22
 80023e0:	d107      	bne.n	80023f2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023f8:	2b28      	cmp	r3, #40	; 0x28
 80023fa:	d107      	bne.n	800240c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2228      	movs	r2, #40	; 0x28
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800240a:	e015      	b.n	8002438 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800241a:	d006      	beq.n	800242a <I2C_ITError+0x6a>
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2b60      	cmp	r3, #96	; 0x60
 8002420:	d003      	beq.n	800242a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002446:	d161      	bne.n	800250c <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002456:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002460:	2b01      	cmp	r3, #1
 8002462:	d020      	beq.n	80024a6 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002468:	4a5e      	ldr	r2, [pc, #376]	; (80025e4 <I2C_ITError+0x224>)
 800246a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fa6d 	bl	8000950 <HAL_DMA_Abort_IT>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8089 	beq.w	8002590 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024a0:	4610      	mov	r0, r2
 80024a2:	4798      	blx	r3
 80024a4:	e074      	b.n	8002590 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	4a4e      	ldr	r2, [pc, #312]	; (80025e4 <I2C_ITError+0x224>)
 80024ac:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fa4c 	bl	8000950 <HAL_DMA_Abort_IT>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d068      	beq.n	8002590 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d10b      	bne.n	80024e4 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002506:	4610      	mov	r0, r2
 8002508:	4798      	blx	r3
 800250a:	e041      	b.n	8002590 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b60      	cmp	r3, #96	; 0x60
 8002516:	d125      	bne.n	8002564 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	2b40      	cmp	r3, #64	; 0x40
 8002532:	d10b      	bne.n	800254c <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7fe ff63 	bl	8001428 <HAL_I2C_AbortCpltCallback>
 8002562:	e015      	b.n	8002590 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d10b      	bne.n	800258a <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe ff43 	bl	8001416 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002596:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d11b      	bne.n	80025dc <I2C_ITError+0x21c>
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b28      	cmp	r3, #40	; 0x28
 80025a8:	d118      	bne.n	80025dc <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025b8:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <I2C_ITError+0x228>)
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe ff02 	bl	80013e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	080025ed 	.word	0x080025ed
 80025e8:	ffff0000 	.word	0xffff0000

080025ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002600:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	2200      	movs	r2, #0
 8002608:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	2200      	movs	r2, #0
 8002610:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002620:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262c:	2200      	movs	r2, #0
 800262e:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	2200      	movs	r2, #0
 8002636:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b60      	cmp	r3, #96	; 0x60
 8002652:	d10e      	bne.n	8002672 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f7fe fedc 	bl	8001428 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002670:	e027      	b.n	80026c2 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002672:	7afb      	ldrb	r3, [r7, #11]
 8002674:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002678:	2b28      	cmp	r3, #40	; 0x28
 800267a:	d117      	bne.n	80026ac <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800269a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2228      	movs	r2, #40	; 0x28
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80026aa:	e007      	b.n	80026bc <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7fe feaa 	bl	8001416 <HAL_I2C_ErrorCallback>
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80026da:	d103      	bne.n	80026e4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80026e2:	e007      	b.n	80026f4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80026ec:	d102      	bne.n	80026f4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2208      	movs	r2, #8
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	420e0020 	.word	0x420e0020

08002718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e26c      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8087 	beq.w	8002846 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002738:	4b92      	ldr	r3, [pc, #584]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b04      	cmp	r3, #4
 8002742:	d00c      	beq.n	800275e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002744:	4b8f      	ldr	r3, [pc, #572]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d112      	bne.n	8002776 <HAL_RCC_OscConfig+0x5e>
 8002750:	4b8c      	ldr	r3, [pc, #560]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275c:	d10b      	bne.n	8002776 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275e:	4b89      	ldr	r3, [pc, #548]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d06c      	beq.n	8002844 <HAL_RCC_OscConfig+0x12c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d168      	bne.n	8002844 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e246      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x76>
 8002780:	4b80      	ldr	r3, [pc, #512]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a7f      	ldr	r2, [pc, #508]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	e02e      	b.n	80027ec <HAL_RCC_OscConfig+0xd4>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x98>
 8002796:	4b7b      	ldr	r3, [pc, #492]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a7a      	ldr	r2, [pc, #488]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 800279c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b78      	ldr	r3, [pc, #480]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a77      	ldr	r2, [pc, #476]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e01d      	b.n	80027ec <HAL_RCC_OscConfig+0xd4>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0xbc>
 80027ba:	4b72      	ldr	r3, [pc, #456]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a71      	ldr	r2, [pc, #452]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b6f      	ldr	r3, [pc, #444]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6e      	ldr	r2, [pc, #440]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0xd4>
 80027d4:	4b6b      	ldr	r3, [pc, #428]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a6a      	ldr	r2, [pc, #424]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b68      	ldr	r3, [pc, #416]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a67      	ldr	r2, [pc, #412]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d013      	beq.n	800281c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fd ff94 	bl	8000720 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fd ff90 	bl	8000720 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e1fa      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0xe4>
 800281a:	e014      	b.n	8002846 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fd ff80 	bl	8000720 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002824:	f7fd ff7c 	bl	8000720 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e1e6      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002836:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x10c>
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d063      	beq.n	800291a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002852:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800285e:	4b49      	ldr	r3, [pc, #292]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b08      	cmp	r3, #8
 8002868:	d11c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x18c>
 800286a:	4b46      	ldr	r3, [pc, #280]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d116      	bne.n	80028a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002876:	4b43      	ldr	r3, [pc, #268]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_RCC_OscConfig+0x176>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d001      	beq.n	800288e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e1ba      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4939      	ldr	r1, [pc, #228]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	e03a      	b.n	800291a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ac:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7fd ff35 	bl	8000720 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ba:	f7fd ff31 	bl	8000720 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e19b      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028cc:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d8:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4927      	ldr	r1, [pc, #156]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]
 80028ec:	e015      	b.n	800291a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ee:	4b26      	ldr	r3, [pc, #152]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fd ff14 	bl	8000720 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fc:	f7fd ff10 	bl	8000720 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e17a      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d03a      	beq.n	800299c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d019      	beq.n	8002962 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <HAL_RCC_OscConfig+0x274>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002934:	f7fd fef4 	bl	8000720 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293c:	f7fd fef0 	bl	8000720 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e15a      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800295a:	2001      	movs	r0, #1
 800295c:	f000 fada 	bl	8002f14 <RCC_Delay>
 8002960:	e01c      	b.n	800299c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_RCC_OscConfig+0x274>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002968:	f7fd feda 	bl	8000720 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296e:	e00f      	b.n	8002990 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7fd fed6 	bl	8000720 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d908      	bls.n	8002990 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e140      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	42420000 	.word	0x42420000
 800298c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	4b9e      	ldr	r3, [pc, #632]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e9      	bne.n	8002970 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a6 	beq.w	8002af6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ae:	4b97      	ldr	r3, [pc, #604]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10d      	bne.n	80029d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	4b94      	ldr	r3, [pc, #592]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	4a93      	ldr	r2, [pc, #588]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	61d3      	str	r3, [r2, #28]
 80029c6:	4b91      	ldr	r3, [pc, #580]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b8e      	ldr	r3, [pc, #568]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b8b      	ldr	r3, [pc, #556]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a8a      	ldr	r2, [pc, #552]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7fd fe97 	bl	8000720 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7fd fe93 	bl	8000720 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b64      	cmp	r3, #100	; 0x64
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e0fd      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b81      	ldr	r3, [pc, #516]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x312>
 8002a1c:	4b7b      	ldr	r3, [pc, #492]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a7a      	ldr	r2, [pc, #488]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	e02d      	b.n	8002a86 <HAL_RCC_OscConfig+0x36e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x334>
 8002a32:	4b76      	ldr	r3, [pc, #472]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4a75      	ldr	r2, [pc, #468]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6213      	str	r3, [r2, #32]
 8002a3e:	4b73      	ldr	r3, [pc, #460]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a72      	ldr	r2, [pc, #456]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	6213      	str	r3, [r2, #32]
 8002a4a:	e01c      	b.n	8002a86 <HAL_RCC_OscConfig+0x36e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d10c      	bne.n	8002a6e <HAL_RCC_OscConfig+0x356>
 8002a54:	4b6d      	ldr	r3, [pc, #436]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a6c      	ldr	r2, [pc, #432]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	6213      	str	r3, [r2, #32]
 8002a60:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4a69      	ldr	r2, [pc, #420]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6213      	str	r3, [r2, #32]
 8002a6c:	e00b      	b.n	8002a86 <HAL_RCC_OscConfig+0x36e>
 8002a6e:	4b67      	ldr	r3, [pc, #412]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4a66      	ldr	r2, [pc, #408]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	6213      	str	r3, [r2, #32]
 8002a7a:	4b64      	ldr	r3, [pc, #400]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4a63      	ldr	r2, [pc, #396]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	f023 0304 	bic.w	r3, r3, #4
 8002a84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d015      	beq.n	8002aba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7fd fe47 	bl	8000720 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fd fe43 	bl	8000720 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0ab      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aac:	4b57      	ldr	r3, [pc, #348]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0ee      	beq.n	8002a96 <HAL_RCC_OscConfig+0x37e>
 8002ab8:	e014      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7fd fe31 	bl	8000720 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fd fe2d 	bl	8000720 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e095      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad8:	4b4c      	ldr	r3, [pc, #304]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ee      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d105      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aea:	4b48      	ldr	r3, [pc, #288]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	4a47      	ldr	r2, [pc, #284]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8081 	beq.w	8002c02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b00:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d061      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d146      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b14:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <HAL_RCC_OscConfig+0x4fc>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fd fe01 	bl	8000720 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b22:	f7fd fdfd 	bl	8000720 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e067      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b34:	4b35      	ldr	r3, [pc, #212]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d108      	bne.n	8002b5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b4a:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	492d      	ldr	r1, [pc, #180]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a19      	ldr	r1, [r3, #32]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	4927      	ldr	r1, [pc, #156]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b74:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <HAL_RCC_OscConfig+0x4fc>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fd fdd1 	bl	8000720 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fd fdcd 	bl	8000720 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e037      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b94:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x46a>
 8002ba0:	e02f      	b.n	8002c02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_RCC_OscConfig+0x4fc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fd fdba 	bl	8000720 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fd fdb6 	bl	8000720 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e020      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x498>
 8002bce:	e018      	b.n	8002c02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e013      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_OscConfig+0x4f4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40007000 	.word	0x40007000
 8002c14:	42420060 	.word	0x42420060

08002c18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0d0      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d910      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 0207 	bic.w	r2, r3, #7
 8002c42:	4965      	ldr	r1, [pc, #404]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b8      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c74:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c8c:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	494d      	ldr	r1, [pc, #308]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d040      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d115      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e073      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06b      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4936      	ldr	r1, [pc, #216]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d08:	f7fd fd0a 	bl	8000720 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fd fd06 	bl	8000720 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e053      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 020c 	and.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1eb      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d210      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0207 	bic.w	r2, r3, #7
 8002d4e:	4922      	ldr	r1, [pc, #136]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e032      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4916      	ldr	r1, [pc, #88]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	490e      	ldr	r1, [pc, #56]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da6:	f000 f821 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002daa:	4601      	mov	r1, r0
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_RCC_ClockConfig+0x1c8>)
 8002db8:	5cd3      	ldrb	r3, [r2, r3]
 8002dba:	fa21 f303 	lsr.w	r3, r1, r3
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <HAL_RCC_ClockConfig+0x1cc>)
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1d0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fc68 	bl	800069c <HAL_InitTick>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	080034f4 	.word	0x080034f4
 8002de4:	20000000 	.word	0x20000000
 8002de8:	20000004 	.word	0x20000004

08002dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dec:	b490      	push	{r4, r7}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002df2:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002df4:	1d3c      	adds	r4, r7, #4
 8002df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dfc:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e16:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d002      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x40>
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d003      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x46>
 8002e2a:	e02d      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e2e:	623b      	str	r3, [r7, #32]
      break;
 8002e30:	e02d      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	0c9b      	lsrs	r3, r3, #18
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e3e:	4413      	add	r3, r2
 8002e40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0c5b      	lsrs	r3, r3, #17
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e5e:	4413      	add	r3, r2
 8002e60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e6a:	fb02 f203 	mul.w	r2, r2, r3
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
 8002e76:	e004      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	623b      	str	r3, [r7, #32]
      break;
 8002e86:	e002      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e8a:	623b      	str	r3, [r7, #32]
      break;
 8002e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3728      	adds	r7, #40	; 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc90      	pop	{r4, r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	080034cc 	.word	0x080034cc
 8002ea0:	080034dc 	.word	0x080034dc
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	007a1200 	.word	0x007a1200
 8002eac:	003d0900 	.word	0x003d0900

08002eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b02      	ldr	r3, [pc, #8]	; (8002ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	20000000 	.word	0x20000000

08002ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ec8:	f7ff fff2 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ecc:	4601      	mov	r1, r0
 8002ece:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	4a03      	ldr	r2, [pc, #12]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	08003504 	.word	0x08003504

08002eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef0:	f7ff ffde 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4601      	mov	r1, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	0adb      	lsrs	r3, r3, #11
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f02:	5cd3      	ldrb	r3, [r2, r3]
 8002f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	08003504 	.word	0x08003504

08002f14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <RCC_Delay+0x34>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <RCC_Delay+0x38>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0a5b      	lsrs	r3, r3, #9
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f30:	bf00      	nop
  }
  while (Delay --);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1e5a      	subs	r2, r3, #1
 8002f36:	60fa      	str	r2, [r7, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f9      	bne.n	8002f30 <RCC_Delay+0x1c>
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	10624dd3 	.word	0x10624dd3

08002f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d07d      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f70:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10d      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7c:	4b4c      	ldr	r3, [pc, #304]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4a4b      	ldr	r2, [pc, #300]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f86:	61d3      	str	r3, [r2, #28]
 8002f88:	4b49      	ldr	r3, [pc, #292]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f94:	2301      	movs	r3, #1
 8002f96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	4b46      	ldr	r3, [pc, #280]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d118      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa4:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a42      	ldr	r2, [pc, #264]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb0:	f7fd fbb6 	bl	8000720 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	e008      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb8:	f7fd fbb2 	bl	8000720 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e06d      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fca:	4b3a      	ldr	r3, [pc, #232]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fd6:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d02e      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d027      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff4:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003004:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800300a:	4a29      	ldr	r2, [pc, #164]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d014      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fd fb81 	bl	8000720 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fd fb7d 	bl	8000720 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e036      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ee      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003044:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4917      	ldr	r1, [pc, #92]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003052:	4313      	orrs	r3, r2
 8003054:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d105      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305c:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003066:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	490b      	ldr	r1, [pc, #44]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	4904      	ldr	r1, [pc, #16]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40007000 	.word	0x40007000
 80030b8:	42420440 	.word	0x42420440

080030bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b08d      	sub	sp, #52	; 0x34
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030c4:	4b55      	ldr	r3, [pc, #340]	; (800321c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80030c6:	f107 040c 	add.w	r4, r7, #12
 80030ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030d0:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	2300      	movs	r3, #0
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030de:	2300      	movs	r3, #0
 80030e0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	2300      	movs	r3, #0
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d07f      	beq.n	80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d002      	beq.n	80030fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d048      	beq.n	800318a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80030f8:	e08b      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80030fa:	4b4a      	ldr	r3, [pc, #296]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003100:	4b48      	ldr	r3, [pc, #288]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d07f      	beq.n	800320c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	0c9b      	lsrs	r3, r3, #18
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003118:	4413      	add	r3, r2
 800311a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800311e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d018      	beq.n	800315c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800312a:	4b3e      	ldr	r3, [pc, #248]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	0c5b      	lsrs	r3, r3, #17
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003138:	4413      	add	r3, r2
 800313a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800314a:	4a37      	ldr	r2, [pc, #220]	; (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	fb02 f303 	mul.w	r3, r2, r3
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315a:	e004      	b.n	8003166 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	4a33      	ldr	r2, [pc, #204]	; (800322c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003166:	4b2f      	ldr	r3, [pc, #188]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003172:	d102      	bne.n	800317a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003178:	e048      	b.n	800320c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4a2c      	ldr	r2, [pc, #176]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003188:	e040      	b.n	800320c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800318a:	4b26      	ldr	r3, [pc, #152]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319a:	d108      	bne.n	80031ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80031a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ac:	e01f      	b.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b8:	d109      	bne.n	80031ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80031c6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80031cc:	e00f      	b.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031d8:	d11a      	bne.n	8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d014      	beq.n	8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80031e6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80031ec:	e010      	b.n	8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80031ee:	e00f      	b.n	8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80031f0:	f7ff fe7c 	bl	8002eec <HAL_RCC_GetPCLK2Freq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	0b9b      	lsrs	r3, r3, #14
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	3301      	adds	r3, #1
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800320a:	e002      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800320c:	bf00      	nop
 800320e:	e000      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003210:	bf00      	nop
    }
  }
  return (frequency);
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003214:	4618      	mov	r0, r3
 8003216:	3734      	adds	r7, #52	; 0x34
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	080034e0 	.word	0x080034e0
 8003220:	080034f0 	.word	0x080034f0
 8003224:	40021000 	.word	0x40021000
 8003228:	007a1200 	.word	0x007a1200
 800322c:	003d0900 	.word	0x003d0900
 8003230:	aaaaaaab 	.word	0xaaaaaaab

08003234 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e084      	b.n	8003354 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7c5b      	ldrb	r3, [r3, #17]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fd f94c 	bl	80004f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f87a 	bl	8003360 <HAL_RTC_WaitForSynchro>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d004      	beq.n	800327c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2204      	movs	r2, #4
 8003276:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e06b      	b.n	8003354 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f89c 	bl	80033ba <RTC_EnterInitMode>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2204      	movs	r2, #4
 800328c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e060      	b.n	8003354 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0207 	bic.w	r2, r2, #7
 80032a0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80032aa:	4b2c      	ldr	r3, [pc, #176]	; (800335c <HAL_RTC_Init+0x128>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a2b      	ldr	r2, [pc, #172]	; (800335c <HAL_RTC_Init+0x128>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80032b6:	4b29      	ldr	r3, [pc, #164]	; (800335c <HAL_RTC_Init+0x128>)
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	4926      	ldr	r1, [pc, #152]	; (800335c <HAL_RTC_Init+0x128>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d003      	beq.n	80032da <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e00e      	b.n	80032f8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80032da:	2001      	movs	r0, #1
 80032dc:	f7ff feee 	bl	80030bc <HAL_RCCEx_GetPeriphCLKFreq>
 80032e0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2204      	movs	r2, #4
 80032ec:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e030      	b.n	8003354 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 010f 	bic.w	r1, r3, #15
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	0c1a      	lsrs	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	b291      	uxth	r1, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	430b      	orrs	r3, r1
 8003322:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f870 	bl	800340a <RTC_ExitInitMode>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d004      	beq.n	800333a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2204      	movs	r2, #4
 8003334:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e00c      	b.n	8003354 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003352:	2300      	movs	r3, #0
  }
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40006c00 	.word	0x40006c00

08003360 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e01d      	b.n	80033b2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0208 	bic.w	r2, r2, #8
 8003384:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003386:	f7fd f9cb 	bl	8000720 <HAL_GetTick>
 800338a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800338c:	e009      	b.n	80033a2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800338e:	f7fd f9c7 	bl	8000720 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800339c:	d901      	bls.n	80033a2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e007      	b.n	80033b2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0ee      	beq.n	800338e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80033c6:	f7fd f9ab 	bl	8000720 <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80033cc:	e009      	b.n	80033e2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80033ce:	f7fd f9a7 	bl	8000720 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033dc:	d901      	bls.n	80033e2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e00f      	b.n	8003402 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ee      	beq.n	80033ce <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0210 	orr.w	r2, r2, #16
 80033fe:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0210 	bic.w	r2, r2, #16
 8003424:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003426:	f7fd f97b 	bl	8000720 <HAL_GetTick>
 800342a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800342c:	e009      	b.n	8003442 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800342e:	f7fd f977 	bl	8000720 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800343c:	d901      	bls.n	8003442 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e007      	b.n	8003452 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ee      	beq.n	800342e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <__libc_init_array>:
 800345c:	b570      	push	{r4, r5, r6, lr}
 800345e:	2500      	movs	r5, #0
 8003460:	4e0c      	ldr	r6, [pc, #48]	; (8003494 <__libc_init_array+0x38>)
 8003462:	4c0d      	ldr	r4, [pc, #52]	; (8003498 <__libc_init_array+0x3c>)
 8003464:	1ba4      	subs	r4, r4, r6
 8003466:	10a4      	asrs	r4, r4, #2
 8003468:	42a5      	cmp	r5, r4
 800346a:	d109      	bne.n	8003480 <__libc_init_array+0x24>
 800346c:	f000 f822 	bl	80034b4 <_init>
 8003470:	2500      	movs	r5, #0
 8003472:	4e0a      	ldr	r6, [pc, #40]	; (800349c <__libc_init_array+0x40>)
 8003474:	4c0a      	ldr	r4, [pc, #40]	; (80034a0 <__libc_init_array+0x44>)
 8003476:	1ba4      	subs	r4, r4, r6
 8003478:	10a4      	asrs	r4, r4, #2
 800347a:	42a5      	cmp	r5, r4
 800347c:	d105      	bne.n	800348a <__libc_init_array+0x2e>
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003484:	4798      	blx	r3
 8003486:	3501      	adds	r5, #1
 8003488:	e7ee      	b.n	8003468 <__libc_init_array+0xc>
 800348a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800348e:	4798      	blx	r3
 8003490:	3501      	adds	r5, #1
 8003492:	e7f2      	b.n	800347a <__libc_init_array+0x1e>
 8003494:	0800350c 	.word	0x0800350c
 8003498:	0800350c 	.word	0x0800350c
 800349c:	0800350c 	.word	0x0800350c
 80034a0:	08003510 	.word	0x08003510

080034a4 <memset>:
 80034a4:	4603      	mov	r3, r0
 80034a6:	4402      	add	r2, r0
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d100      	bne.n	80034ae <memset+0xa>
 80034ac:	4770      	bx	lr
 80034ae:	f803 1b01 	strb.w	r1, [r3], #1
 80034b2:	e7f9      	b.n	80034a8 <memset+0x4>

080034b4 <_init>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr

080034c0 <_fini>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr
